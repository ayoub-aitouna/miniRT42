!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Apply_transform	src/math_lib/gtfm.c	/^matrex_t *Apply_transform(ray_t *poi, matrex_t *matrex_transform)$/;"	f
CC	minilibx/Makefile.mk	/^	CC = clang$/;"	m
CC	minilibx/Makefile.mk	/^CC	= gcc$/;"	m
CC	minilibx/test/Makefile.mk	/^	CC	= gcc$/;"	m
CC	minilibx/test/Makefile.mk	/^	CC = clang$/;"	m
CFLAGS	minilibx/Makefile.mk	/^CFLAGS	= -O3 -I$(INC)$/;"	m
CFLAGS	minilibx/test/Makefile.mk	/^CFLAGS= -I$(INC) -O3 -I.. -g$/;"	m
Camera	src/camera.c	/^camera_t *Camera()$/;"	f
ENV_DISPLAY	minilibx/mlx_int.h	43;"	d
ERR_NO_TRUECOLOR	minilibx/mlx_int.h	45;"	d
HALFPI	src/math_lib/headers/types.h	9;"	d
HEIGHT	src/headers/main.h	13;"	d
IM1_SX	minilibx/test/main.c	7;"	d	file:
IM1_SY	minilibx/test/main.c	8;"	d	file:
IM3_SX	minilibx/test/main.c	9;"	d	file:
IM3_SY	minilibx/test/main.c	10;"	d	file:
INC	minilibx/Makefile.mk	/^INC	=%%%%$/;"	m
INC	minilibx/test/Makefile.mk	/^INC=%%%%$/;"	m
INCLIB	minilibx/test/Makefile.mk	/^INCLIB=$(INC)\/..\/lib$/;"	m
I_SDL	Makefile	/^I_SDL	:= -I$(shell brew --prefix)\/include$/;"	m
LFLAGS	minilibx/test/Makefile.mk	/^LFLAGS = -L.. -lmlx -L$(INCLIB) -lXext -lX11 -lm$/;"	m
LIB_H	src/lib/lib.h	2;"	d
LOCALHOST	minilibx/mlx_int.h	44;"	d
L_SDL	Makefile	/^L_SDL	:= -L$(shell brew --prefix sdl2)\/lib$/;"	m
Light	src/headers/types.h	/^typedef struct Light$/;"	s
MATH_H	src/math_lib/headers/vectormath.h	2;"	d
MATREX_H	src/math_lib/headers/matrex.h	2;"	d
MLX_H	minilibx/mlx.h	32;"	d
MLX_INT_H	minilibx/mlx_int.h	19;"	d
MLX_MAX_EVENT	minilibx/mlx_int.h	40;"	d
MLX_TYPE_SHM	minilibx/mlx_int.h	37;"	d
MLX_TYPE_SHM_PIXMAP	minilibx/mlx_int.h	36;"	d
MLX_TYPE_XIMAGE	minilibx/mlx_int.h	38;"	d
M_TYPES_H	src/headers/types.h	2;"	d
NAME	Makefile	/^NAME	:= App$/;"	m
NAME	minilibx/Makefile.mk	/^NAME		= libmlx.a$/;"	m
NAME	minilibx/test/Makefile.mk	/^NAME= mlx-test$/;"	m
NAME_UNAME	minilibx/Makefile.mk	/^NAME_UNAME	= libmlx_$(UNAME).a$/;"	m
OBJ	Makefile	/^OBJ		:= $(patsubst %.c, $(OBJ_DIR)\/%.o, $(SRC))$/;"	m
OBJ	minilibx/Makefile.mk	/^OBJ	= $(addprefix $(OBJ_DIR)\/,$(SRC:%.c=%.o))$/;"	m
OBJ	minilibx/test/Makefile.mk	/^OBJ = $(SRC:%.c=%.o)$/;"	m
OBJ_DIR	Makefile	/^OBJ_DIR	:= OBJECT_FILES$/;"	m
OBJ_DIR	minilibx/Makefile.mk	/^OBJ_DIR = obj$/;"	m
Object	src/headers/types.h	/^typedef struct Object$/;"	s
PI	src/math_lib/headers/types.h	5;"	d
RETURN	minilibx/mlx_xpm.c	17;"	d	file:
RT	src/headers/main.h	2;"	d
RTCIMAGE_H	src/headers/image.h	2;"	d
RT_CAMERA	src/headers/camera.h	2;"	d
Render	src/scene.c	/^t_image *Render(scene_t *scene)$/;"	f
SPHER_H	src/Objects/headers/spher.h	2;"	d
SRC	Makefile	/^SRC		:= $(wildcard src\/*.c) $(wildcard src\/**\/*.c)$/;"	m
SRC	minilibx/Makefile.mk	/^SRC	= mlx_init.c mlx_new_window.c mlx_pixel_put.c mlx_loop.c \\$/;"	m
SRC	minilibx/test/Makefile.mk	/^SRC = main.c$/;"	m
Scene	src/headers/types.h	/^typedef struct Scene$/;"	s
Scene	src/scene.c	/^scene_t *Scene()$/;"	f
Set_transform	src/math_lib/gtfm.c	/^matrex_t *Set_transform(matrex_t *translation, matrex_t *rotation, matrex_t *scal)$/;"	f
TYPES_H	src/math_lib/headers/types.h	2;"	d
UNAME	minilibx/Makefile.mk	/^UNAME = $(shell uname)$/;"	m
UNAME	minilibx/test/Makefile.mk	/^UNAME := $(shell uname)$/;"	m
WARN_SHM_ATTACH	minilibx/mlx_int.h	46;"	d
WIDTH	src/headers/main.h	12;"	d
WIN1_SX	minilibx/test/main.c	5;"	d	file:
WIN1_SY	minilibx/test/main.c	6;"	d	file:
X_ShmAttach	minilibx/mlx_new_image.c	20;"	d	file:
addr	src/headers/types.h	/^	char *addr;$/;"	m	struct:s_data
aspect_ration	src/headers/types.h	/^	double aspect_ration;$/;"	m	struct:camera
at_exit	minilibx/test/run_tests.sh	/^at_exit() {$/;"	f
base_color	src/headers/types.h	/^	vector_t *base_color;$/;"	m	struct:Light
base_color	src/headers/types.h	/^	vector_t *base_color;$/;"	m	struct:Object
bck_tfm	src/headers/types.h	/^	matrex_t *bck_tfm;$/;"	m	struct:Object
bg	src/main.c	/^void bg(void *mlx, void *win, t_image *image)$/;"	f
bits_per_pixel	src/headers/types.h	/^	int bits_per_pixel;$/;"	m	struct:s_data
blue	src/headers/image.h	/^    double **blue;$/;"	m	struct:image
bpp	minilibx/mlx_int.h	/^	int				bpp;$/;"	m	struct:s_img
bpp1	minilibx/test/main.c	/^int	bpp1;$/;"	v
bpp2	minilibx/test/main.c	/^int	bpp2;$/;"	v
bpp3	minilibx/test/main.c	/^int	bpp3;$/;"	v
bpp4	minilibx/test/main.c	/^int	bpp4;$/;"	v
calculat_geometry	src/camera.c	/^void calculat_geometry(camera_t *camera)$/;"	f
calculat_max	src/Image.c	/^double calculat_max(double **channel)$/;"	f
camera	src/headers/types.h	/^typedef struct camera$/;"	s
camera_t	src/headers/types.h	/^} camera_t;$/;"	t	typeref:struct:camera
cc	Makefile	/^cc		:= gcc$/;"	m
clean	minilibx/configure	/^clean(){$/;"	f
cmap	minilibx/mlx_int.h	/^	Colormap	cmap;$/;"	m	struct:s_xvar
col	minilibx/mlx_int.h	/^	int		col;$/;"	m	struct:s_xpm_col
color	minilibx/mlx_int.h	/^	int		color;$/;"	m	struct:s_col_name
color_map_1	minilibx/test/main.c	/^int	color_map_1(void *win,int w,int h)$/;"	f
color_map_2	minilibx/test/main.c	/^int	color_map_2(unsigned char *data,int bpp,int sl,int w,int h,int endian, int type)$/;"	f
cols	src/math_lib/headers/types.h	/^	int cols;$/;"	m	struct:matrex
content	src/lib/lib.h	/^    void *content;$/;"	m	struct:list
convert	src/Image.c	/^int convert(double red, double green, double blue, double max, int endian)$/;"	f
copy_vector	src/math_lib/vectormath.c	/^vector_t *copy_vector(vector_t v)$/;"	f
creat_matrex	src/math_lib/matrex.c	/^matrex_t *creat_matrex(int rows, int cols)$/;"	f
create_cols	src/math_lib/matrex.c	/^double *create_cols(int c)$/;"	f
create_sphere	src/Objects/shpher.c	/^object_t *create_sphere(matrex_t *translation, matrex_t *rotation, matrex_t *scal, vector_t color)$/;"	f
create_sphere	src/Objects/spher.c	/^object_t *create_sphere(matrex_t *translation, matrex_t *rotation, matrex_t *scal, vector_t *color)$/;"	f
cross	src/math_lib/vectormath.c	/^vector_t *cross(vector_t v, vector_t u)$/;"	f
data	minilibx/mlx_int.h	/^	char			*data;$/;"	m	struct:s_img
data1	minilibx/test/main.c	/^char	*data1;$/;"	v
data2	minilibx/test/main.c	/^char	*data2;$/;"	v
data3	minilibx/test/main.c	/^char	*data3;$/;"	v
data4	minilibx/test/main.c	/^char	*data4;$/;"	v
decrgb	minilibx/mlx_int.h	/^	int			decrgb[6];$/;"	m	struct:s_xvar
depth	minilibx/mlx_int.h	/^	int			depth;$/;"	m	struct:s_xvar
display	minilibx/mlx_int.h	/^	Display		*display;$/;"	m	struct:s_xvar
display	src/Image.c	/^void display(void *mlx, void *win, t_image *image)$/;"	f
division	src/math_lib/vectormath.c	/^vector_t *division(vector_t *target, vector_t *v)$/;"	f
do_flush	minilibx/mlx_int.h	/^	int			do_flush;$/;"	m	struct:s_xvar
dot	src/math_lib/vectormath.c	/^float dot(vector_t v, vector_t u)$/;"	f
end_loop	minilibx/mlx_int.h	/^	int 		end_loop;$/;"	m	struct:s_xvar
endian	src/headers/types.h	/^	int endian;$/;"	m	struct:s_data
endian1	minilibx/test/main.c	/^int	endian1;$/;"	v
endian2	minilibx/test/main.c	/^int	endian2;$/;"	v
endian3	minilibx/test/main.c	/^int	endian3;$/;"	v
endian4	minilibx/test/main.c	/^int	endian4;$/;"	v
equal	src/math_lib/vectormath.c	/^vector_t *equal(vector_t *target, vector_t *v)$/;"	f
expose_hook	minilibx/mlx_int.h	/^	int					(*expose_hook)();$/;"	m	struct:s_win_list
expose_param	minilibx/mlx_int.h	/^	void				*expose_param;$/;"	m	struct:s_win_list
expose_win1	minilibx/test/main.c	/^int	expose_win1(void *p)$/;"	f
expose_win2	minilibx/test/main.c	/^int	expose_win2(void *p)$/;"	f
fill_mt	src/math_lib/matrex.c	/^void fill_mt(matrex_t *mt, double *values)$/;"	f
format	minilibx/mlx_int.h	/^	int				format;$/;"	m	struct:s_img
from_mt_to_vt	src/math_lib/vectormath.c	/^vector_t *from_mt_to_vt(matrex_t mt)$/;"	f
from_vector_to_matrex	src/math_lib/matrex.c	/^matrex_t *from_vector_to_matrex(vector_t vt, matrex_t mt)$/;"	f
ft_lstiter	src/lib/ft_lstiter.c	/^void ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f
ft_lstnew	src/lib/ft_lstnew.c	/^t_list *ft_lstnew(void *content)$/;"	f
ft_lstsize	src/lib/ft_lstsize.c	/^int ft_lstsize(t_list *lst)$/;"	f
fwd_tfm	src/headers/types.h	/^	matrex_t *fwd_tfm;$/;"	m	struct:Object
gc	minilibx/mlx_int.h	/^	GC					gc;$/;"	m	struct:s_win_list
gc	minilibx/mlx_int.h	/^	GC				gc;$/;"	m	struct:s_img
generate_ray	src/camera.c	/^ray_t *generate_ray(camera_t *camera, int screenX, int screenY)$/;"	f
gere_mouse	minilibx/test/new_win.c	/^int gere_mouse(int x,int y,int button,void*toto)$/;"	f
get_xlib_include_path	minilibx/configure	/^get_xlib_include_path(){$/;"	f
green	src/headers/image.h	/^    double **green;$/;"	m	struct:image
height	minilibx/mlx_int.h	/^	int				height;$/;"	m	struct:s_img
hook	minilibx/mlx_int.h	/^	int		(*hook)();$/;"	m	struct:s_event_list
hooks	minilibx/mlx_int.h	/^	t_event_list		hooks[MLX_MAX_EVENT];$/;"	m	struct:s_win_list
horizontal_size	src/headers/types.h	/^	double horizontal_size;$/;"	m	struct:camera
im1	minilibx/test/main.c	/^void    *im1;$/;"	v
im2	minilibx/test/main.c	/^void	*im2;$/;"	v
im3	minilibx/test/main.c	/^void	*im3;$/;"	v
im4	minilibx/test/main.c	/^void	*im4;$/;"	v
image	minilibx/mlx_int.h	/^	XImage			*image;$/;"	m	struct:s_img
image	src/headers/image.h	/^typedef struct image$/;"	s
img	src/headers/types.h	/^	void *img;$/;"	m	struct:s_data
init_channel	src/Image.c	/^double **init_channel()$/;"	f
initialize	src/Image.c	/^t_image *initialize(void *mlx)$/;"	f
key_hook	minilibx/mlx_int.h	/^	int					(*key_hook)();$/;"	m	struct:s_win_list
key_param	minilibx/mlx_int.h	/^	void				*key_param;$/;"	m	struct:s_win_list
key_win1	minilibx/test/main.c	/^int	key_win1(int key,void *p)$/;"	f
key_win2	minilibx/test/main.c	/^int	key_win2(int key,void *p)$/;"	f
key_win3	minilibx/test/main.c	/^int	key_win3(int key,void *p)$/;"	f
lenght	src/headers/types.h	/^	double lenght;$/;"	m	struct:camera
light_t	src/headers/types.h	/^} light_t;$/;"	t	typeref:struct:Light
line_length	src/headers/types.h	/^	int line_length;$/;"	m	struct:s_data
list	src/lib/lib.h	/^typedef struct list$/;"	s
local_endian	minilibx/test/main.c	/^int	local_endian;$/;"	v
log_error	minilibx/configure	/^log_error(){$/;"	f
log_error	minilibx/test/run_tests.sh	/^log_error(){$/;"	f
log_info	minilibx/configure	/^log_info(){$/;"	f
log_info	minilibx/test/run_tests.sh	/^log_info(){$/;"	f
logging	minilibx/configure	/^logging(){$/;"	f
logging	minilibx/test/run_tests.sh	/^logging(){$/;"	f
loockat	src/headers/types.h	/^	vector_t *loockat;$/;"	m	struct:camera
loop_hook	minilibx/mlx_int.h	/^	int			(*loop_hook)();$/;"	m	struct:s_xvar
loop_param	minilibx/mlx_int.h	/^	void		*loop_param;$/;"	m	struct:s_xvar
m_camera	src/headers/types.h	/^	camera_t *m_camera;$/;"	m	struct:Scene
m_lab	src/headers/types.h	/^	vector_t *m_lab;$/;"	m	struct:ray
m_light_list	src/headers/types.h	/^	t_list *m_light_list;$/;"	m	struct:Scene
m_object_list	src/headers/types.h	/^	t_list *m_object_list;$/;"	m	struct:Scene
main	minilibx/test/main.c	/^int	main()$/;"	f
main	minilibx/test/new_win.c	/^int main()$/;"	f
main	minilibx/test/run_tests.sh	/^main(){$/;"	f
main	src/main.c	/^int main(int ac, char **av)$/;"	f
mask	minilibx/mlx_int.h	/^	int		mask;$/;"	m	struct:s_event_list
matrex	src/math_lib/headers/types.h	/^	double **matrex;$/;"	m	struct:matrex
matrex	src/math_lib/headers/types.h	/^typedef struct matrex{$/;"	s
matrex_t	src/math_lib/headers/types.h	/^} matrex_t;$/;"	t	typeref:struct:matrex
matrix	src/math_lib/matrex.c	/^matrex_t *matrix(int rows, int cols, double *values)$/;"	f
minus	src/math_lib/vectormath.c	/^vector_t *minus(vector_t *target, vector_t *v)$/;"	f
mlx	minilibx/test/main.c	/^void	*mlx;$/;"	v
mlx	minilibx/test/new_win.c	/^void *mlx;$/;"	v
mlx_X_error	minilibx/mlx_new_image.c	/^int	mlx_X_error;$/;"	v
mlx_clear_window	minilibx/mlx_clear_window.c	/^int		mlx_clear_window(t_xvar *xvar,t_win_list *win)$/;"	f
mlx_col_name	minilibx/mlx_rgb.c	/^struct s_col_name mlx_col_name[] =$/;"	v	typeref:struct:s_col_name
mlx_destroy_display	minilibx/mlx_destroy_display.c	/^int	mlx_destroy_display(t_xvar *xvar)$/;"	f
mlx_destroy_image	minilibx/mlx_destroy_image.c	/^int	mlx_destroy_image(t_xvar *xvar, t_img *img)$/;"	f
mlx_destroy_window	minilibx/mlx_destroy_window.c	/^int	mlx_destroy_window(t_xvar *xvar,t_win_list *win)$/;"	f
mlx_do_key_autorepeatoff	minilibx/mlx_hook.c	/^int	mlx_do_key_autorepeatoff(t_xvar *xvar)$/;"	f
mlx_do_key_autorepeaton	minilibx/mlx_hook.c	/^int	mlx_do_key_autorepeaton(t_xvar *xvar)$/;"	f
mlx_do_sync	minilibx/mlx_hook.c	/^int	mlx_do_sync(t_xvar *xvar)$/;"	f
mlx_expose_hook	minilibx/mlx_expose_hook.c	/^int		mlx_expose_hook(t_win_list *win,int (*funct)(),void *param)$/;"	f
mlx_ext_fullscreen	minilibx/mlx_ext_randr.c	/^int			mlx_ext_fullscreen(t_xvar *xvar, t_win_list *win, int fullscreen)$/;"	f
mlx_flush_event	minilibx/mlx_flush_event.c	/^int	mlx_flush_event(t_xvar *xvar)$/;"	f
mlx_get_color_value	minilibx/mlx_get_color_value.c	/^int             mlx_get_color_value(t_xvar *xvar,int color)$/;"	f
mlx_get_data_addr	minilibx/mlx_get_data_addr.c	/^char	*mlx_get_data_addr(t_img *img,int *bits_per_pixel,$/;"	f
mlx_get_screen_size	minilibx/mlx_screen_size.c	/^int		mlx_get_screen_size(void *mlx_ptr, int *sizex, int *sizey)$/;"	f
mlx_hook	minilibx/mlx_hook.c	/^int	mlx_hook(t_win_list *win, int x_event, int x_mask, $/;"	f
mlx_init	minilibx/mlx_init.c	/^void	*mlx_init()$/;"	f
mlx_int_anti_resize_win	minilibx/mlx_int_anti_resize_win.c	/^int	mlx_int_anti_resize_win(t_xvar *xvar,Window win,int w,int h)$/;"	f
mlx_int_deal_shm	minilibx/mlx_init.c	/^int		mlx_int_deal_shm(t_xvar *xvar)$/;"	f
mlx_int_do_nothing	minilibx/mlx_int_do_nothing.c	/^int	mlx_int_do_nothing(void *param)$/;"	f
mlx_int_egal_img	minilibx/mlx_lib_xpm.c	/^int	mlx_int_egal_img(XImage *img1,XImage *img2)$/;"	f
mlx_int_file_get_rid_comment	minilibx/mlx_xpm.c	/^int	mlx_int_file_get_rid_comment(char *ptr, int size)$/;"	f
mlx_int_get_col_name	minilibx/mlx_xpm.c	/^int	mlx_int_get_col_name(char *str,int size)$/;"	f
mlx_int_get_good_color	minilibx/mlx_get_color_value.c	/^int		mlx_int_get_good_color(t_xvar *xvar,int color)$/;"	f
mlx_int_get_line	minilibx/mlx_xpm.c	/^char	*mlx_int_get_line(char *ptr,int *pos,int size)$/;"	f
mlx_int_get_text_rgb	minilibx/mlx_xpm.c	/^int	mlx_int_get_text_rgb(char *name, char *end)$/;"	f
mlx_int_get_visual	minilibx/mlx_int_get_visual.c	/^int		mlx_int_get_visual(t_xvar *xvar)$/;"	f
mlx_int_new_image	minilibx/mlx_new_image.c	/^void	*mlx_int_new_image(t_xvar *xvar,int width, int height,int format)$/;"	f
mlx_int_new_xshm_image	minilibx/mlx_new_image.c	/^void	*mlx_int_new_xshm_image(t_xvar *xvar,int width,int height,int format)$/;"	f
mlx_int_param_ButtonPress	minilibx/mlx_int_param_event.c	/^int	mlx_int_param_ButtonPress(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f
mlx_int_param_ButtonRelease	minilibx/mlx_int_param_event.c	/^int	mlx_int_param_ButtonRelease(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f
mlx_int_param_Expose	minilibx/mlx_int_param_event.c	/^int	mlx_int_param_Expose(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f
mlx_int_param_KeyPress	minilibx/mlx_int_param_event.c	/^int	mlx_int_param_KeyPress(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f
mlx_int_param_KeyRelease	minilibx/mlx_int_param_event.c	/^int	mlx_int_param_KeyRelease(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f
mlx_int_param_MotionNotify	minilibx/mlx_int_param_event.c	/^int	mlx_int_param_MotionNotify(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f
mlx_int_param_event	minilibx/mlx_int_param_event.c	/^int	(*(mlx_int_param_event[]))() =$/;"	v
mlx_int_param_generic	minilibx/mlx_int_param_event.c	/^int	mlx_int_param_generic(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f
mlx_int_param_undef	minilibx/mlx_int_param_event.c	/^int	mlx_int_param_undef()$/;"	f
mlx_int_parse_xpm	minilibx/mlx_xpm.c	/^void	*mlx_int_parse_xpm(t_xvar *xvar,void *info,int info_size,char *(*f)())$/;"	f
mlx_int_rgb_conversion	minilibx/mlx_init.c	/^int		mlx_int_rgb_conversion(t_xvar *xvar)$/;"	f
mlx_int_set_win_event_mask	minilibx/mlx_int_set_win_event_mask.c	/^int	mlx_int_set_win_event_mask(t_xvar *xvar)$/;"	f
mlx_int_static_line	minilibx/mlx_xpm.c	/^char	*mlx_int_static_line(char **xpm_data,int *pos,int size)$/;"	f
mlx_int_str_str	minilibx/mlx_int_str_to_wordtab.c	/^int	mlx_int_str_str(char *str,char *find,int len)$/;"	f
mlx_int_str_str_cote	minilibx/mlx_int_str_to_wordtab.c	/^int	mlx_int_str_str_cote(char *str,char *find,int len)$/;"	f
mlx_int_str_to_wordtab	minilibx/mlx_int_str_to_wordtab.c	/^char	**mlx_int_str_to_wordtab(char *str)$/;"	f
mlx_int_wait_first_expose	minilibx/mlx_int_wait_first_expose.c	/^int	mlx_int_wait_first_expose(t_xvar *xvar,Window win)$/;"	f
mlx_int_xpm_f_image	minilibx/mlx_lib_xpm.c	/^void		*mlx_int_xpm_f_image(t_xvar *xvar,int *width,int *height,$/;"	f
mlx_int_xpm_set_pixel	minilibx/mlx_xpm.c	/^int	mlx_int_xpm_set_pixel(t_img *img, char *data, int opp, int col, int x)$/;"	f
mlx_key_hook	minilibx/mlx_key_hook.c	/^int		mlx_key_hook(t_win_list *win,int (*funct)(),void *param)$/;"	f
mlx_loop	minilibx/mlx_loop.c	/^int			mlx_loop(t_xvar *xvar)$/;"	f
mlx_loop_end	minilibx/mlx_loop.c	/^int			mlx_loop_end(t_xvar *xvar)$/;"	f
mlx_loop_hook	minilibx/mlx_loop_hook.c	/^int	mlx_loop_hook(t_xvar *xvar,int (*funct)(),void *param)$/;"	f
mlx_mouse_get_pos	minilibx/mlx_mouse.c	/^int		mlx_mouse_get_pos(t_xvar *xvar, t_win_list *win, \\$/;"	f
mlx_mouse_hide	minilibx/mlx_mouse.c	/^int		mlx_mouse_hide(t_xvar *xvar, t_win_list *win)$/;"	f
mlx_mouse_hook	minilibx/mlx_mouse_hook.c	/^int		mlx_mouse_hook(t_win_list *win,int (*funct)(),void *param)$/;"	f
mlx_mouse_move	minilibx/mlx_mouse.c	/^int		mlx_mouse_move(t_xvar *xvar, t_win_list *win, int x, int y)$/;"	f
mlx_mouse_show	minilibx/mlx_mouse.c	/^int		mlx_mouse_show(t_xvar *xvar, t_win_list *win)$/;"	f
mlx_new_image	minilibx/mlx_new_image.c	/^void	*mlx_new_image(t_xvar *xvar,int width, int height)$/;"	f
mlx_new_image2	minilibx/mlx_new_image.c	/^void	*mlx_new_image2(t_xvar *xvar,int width, int height)$/;"	f
mlx_new_window	minilibx/mlx_new_window.c	/^void	*mlx_new_window(t_xvar *xvar,int size_x,int size_y,char *title)$/;"	f
mlx_pixel_put	minilibx/mlx_pixel_put.c	/^int		mlx_pixel_put(t_xvar *xvar,t_win_list *win,$/;"	f
mlx_put_image_to_window	minilibx/mlx_put_image_to_window.c	/^int	mlx_put_image_to_window(t_xvar *xvar,t_win_list *win,t_img *img,$/;"	f
mlx_set_font	minilibx/mlx_set_font.c	/^void	mlx_set_font(t_xvar *xvar, t_win_list *win, char *name)$/;"	f
mlx_string_put	minilibx/mlx_string_put.c	/^int		mlx_string_put(t_xvar *xvar,t_win_list *win,$/;"	f
mlx_xpm_file_to_image	minilibx/mlx_lib_xpm.c	/^void	*mlx_xpm_file_to_image(t_xvar *xvar,char *filename,$/;"	f
mlx_xpm_file_to_image	minilibx/mlx_xpm.c	/^void	*mlx_xpm_file_to_image(t_xvar *xvar,char *file,int *width,int *height)$/;"	f
mlx_xpm_to_image	minilibx/mlx_lib_xpm.c	/^void	*mlx_xpm_to_image(t_xvar *xvar,char **data,int *width,int *height)$/;"	f
mlx_xpm_to_image	minilibx/mlx_xpm.c	/^void	*mlx_xpm_to_image(t_xvar *xvar,char **xpm_data,int *width,int *height)$/;"	f
mouse_hook	minilibx/mlx_int.h	/^	int					(*mouse_hook)();$/;"	m	struct:s_win_list
mouse_param	minilibx/mlx_int.h	/^	void				*mouse_param;$/;"	m	struct:s_win_list
mouse_win1	minilibx/test/main.c	/^int	mouse_win1(int button,int x,int y, void *p)$/;"	f
mouse_win2	minilibx/test/main.c	/^int	mouse_win2(int button,int x,int y, void *p)$/;"	f
mouse_win3	minilibx/test/main.c	/^int	mouse_win3(int x,int y, void *p)$/;"	f
mt_multiplication	src/math_lib/matrex.c	/^matrex_t *mt_multiplication(matrex_t *mt1, matrex_t *mt2)$/;"	f
muliplication	src/math_lib/vectormath.c	/^vector_t *muliplication(vector_t *target, vector_t *v)$/;"	f
my_mlx_pixel_put	src/Image.c	/^void my_mlx_pixel_put(t_data *data, int x, int y, int color)$/;"	f
name	minilibx/mlx_int.h	/^	char	*name;$/;"	m	struct:s_col_name
name	minilibx/mlx_int.h	/^	int		name;$/;"	m	struct:s_xpm_col
next	minilibx/mlx_int.h	/^	struct s_win_list	*next;$/;"	m	struct:s_win_list	typeref:struct:s_win_list::s_win_list
next	src/lib/lib.h	/^    struct list *next;$/;"	m	struct:list	typeref:struct:list::list
normalize	src/math_lib/vectormath.c	/^float normalize(vector_t *v)$/;"	f
normalized	src/math_lib/vectormath.c	/^vector_t *normalized(vector_t *v)$/;"	f
num_division	src/math_lib/vectormath.c	/^vector_t *num_division(vector_t *target, float num)$/;"	f
num_muliplication	src/math_lib/vectormath.c	/^vector_t *num_muliplication(vector_t *target, float num)$/;"	f
object_t	src/headers/types.h	/^} object_t;$/;"	t	typeref:struct:Object
param	minilibx/mlx_int.h	/^	void	*param;$/;"	m	struct:s_event_list
parse_args	minilibx/configure	/^parse_args(){$/;"	f
pix	minilibx/mlx_int.h	/^	Pixmap			pix;$/;"	m	struct:s_img
pluse	src/math_lib/vectormath.c	/^vector_t *pluse(vector_t *target, vector_t *v)$/;"	f
point1	src/headers/types.h	/^	vector_t *point1;$/;"	m	struct:ray
point2	src/headers/types.h	/^	vector_t *point2;$/;"	m	struct:ray
point_t	src/math_lib/headers/types.h	/^typedef		vector_t point_t;$/;"	t
position	src/headers/types.h	/^	vector_t *position;$/;"	m	struct:Light
position	src/headers/types.h	/^	vector_t *position;$/;"	m	struct:camera
print_matrex	src/math_lib/matrex.c	/^void print_matrex(matrex_t *matrex)$/;"	f
printv	src/math_lib/main.c	/^void printv(vector_t vector)$/;"	f
private_cmap	minilibx/mlx_int.h	/^	int			private_cmap;$/;"	m	struct:s_xvar
pshm_format	minilibx/mlx_int.h	/^	int			pshm_format;$/;"	m	struct:s_xvar
push_back	src/lib/push_back.c	/^void push_back(t_list **lst, t_list *new)$/;"	f
ray	src/headers/types.h	/^typedef struct ray$/;"	s
ray_t	src/headers/types.h	/^} ray_t;$/;"	t	typeref:struct:ray
red	src/headers/image.h	/^    double **red;$/;"	m	struct:image
root	minilibx/mlx_int.h	/^	Window		root;$/;"	m	struct:s_xvar
rows	src/math_lib/headers/types.h	/^	int rows;$/;"	m	struct:matrex
s_col_name	minilibx/mlx_int.h	/^struct	s_col_name$/;"	s
s_data	src/headers/types.h	/^typedef struct s_data$/;"	s
s_event_list	minilibx/mlx_int.h	/^typedef struct	s_event_list$/;"	s
s_img	minilibx/mlx_int.h	/^typedef struct	s_img$/;"	s
s_win_list	minilibx/mlx_int.h	/^typedef struct	s_win_list$/;"	s
s_xpm_col	minilibx/mlx_int.h	/^typedef	struct	s_xpm_col$/;"	s
s_xvar	minilibx/mlx_int.h	/^typedef struct	s_xvar$/;"	s
saved_mode	minilibx/mlx_ext_randr.c	/^RRMode	saved_mode = 0;$/;"	v
scene_t	src/headers/types.h	/^} scene_t;$/;"	t	typeref:struct:Scene
screen	minilibx/mlx_int.h	/^	int			screen;$/;"	m	struct:s_xvar
screen_center	src/headers/types.h	/^	vector_t *screen_center;$/;"	m	struct:camera
screen_u	src/headers/types.h	/^	vector_t *screen_u;$/;"	m	struct:camera
screen_v	src/headers/types.h	/^	vector_t *screen_v;$/;"	m	struct:camera
set_pixel	src/Image.c	/^void set_pixel(t_image *image, int x, int y, double r, double g, double b)$/;"	f
sh_int_test	src/Objects/shpher.c	/^int sh_int_test(ray_t camera_ray, vector_t *int_point, vector_t *local_normal, vector_t *local_color)$/;"	f
sh_int_test	src/Objects/spher.c	/^int sh_int_test(ray_t camera_ray, vector_t *int_point, vector_t *local_normal, vector_t *local_color)$/;"	f
shm	minilibx/mlx_int.h	/^	XShmSegmentInfo	shm;$/;"	m	struct:s_img
shm_att_pb	minilibx/mlx_new_image.c	/^int	shm_att_pb(Display *d,XErrorEvent *ev)$/;"	f
show_help	minilibx/configure	/^show_help(){$/;"	f
sigint_handler	minilibx/test/run_tests.sh	/^sigint_handler(){$/;"	f
size_line	minilibx/mlx_int.h	/^	int				size_line;$/;"	m	struct:s_img
sl1	minilibx/test/main.c	/^int	sl1;$/;"	v
sl2	minilibx/test/main.c	/^int	sl2;$/;"	v
sl3	minilibx/test/main.c	/^int	sl3;$/;"	v
sl4	minilibx/test/main.c	/^int	sl4;$/;"	v
strlcpy_is_not_posix	minilibx/mlx_xpm.c	/^unsigned int	strlcpy_is_not_posix(char *dest, char *src, unsigned int size)$/;"	f
t_data	src/headers/types.h	/^} t_data;$/;"	t	typeref:struct:s_data
t_event_list	minilibx/mlx_int.h	/^}				t_event_list;$/;"	t	typeref:struct:s_event_list
t_image	src/headers/image.h	/^} t_image;$/;"	t	typeref:struct:image
t_img	minilibx/mlx_int.h	/^}				t_img;$/;"	t	typeref:struct:s_img
t_list	src/lib/lib.h	/^} t_list;$/;"	t	typeref:struct:list
t_win_list	minilibx/mlx_int.h	/^}				t_win_list;$/;"	t	typeref:struct:s_win_list
t_xpm_col	minilibx/mlx_int.h	/^}				t_xpm_col;$/;"	t	typeref:struct:s_xpm_col
t_xvar	minilibx/mlx_int.h	/^}				t_xvar;$/;"	t	typeref:struct:s_xvar
test_default_main	minilibx/test/run_tests.sh	/^test_default_main(){$/;"	f
test_inter	src/headers/types.h	/^	test_intersection test_inter;$/;"	m	struct:Object
test_intersection	src/headers/types.h	/^typedef int (*test_intersection)(struct ray, vector_t *, vector_t *, vector_t *);$/;"	t
type	minilibx/mlx_int.h	/^	int				type;$/;"	m	struct:s_img
up	src/headers/types.h	/^	vector_t *up;$/;"	m	struct:camera
use_xshm	minilibx/mlx_int.h	/^	int			use_xshm;$/;"	m	struct:s_xvar
vector	src/math_lib/headers/types.h	/^typedef struct vector$/;"	s
vector	src/math_lib/vectormath.c	/^vector_t *vector(float x, float y, float z)$/;"	f
vector2	src/math_lib/headers/types.h	/^typedef struct vector2{$/;"	s
vector2_t	src/math_lib/headers/types.h	/^} vector2_t;$/;"	t	typeref:struct:vector2
vector_lenght	src/math_lib/vectormath.c	/^float vector_lenght(vector_t v)$/;"	f
vector_lenght2	src/math_lib/vectormath.c	/^float vector_lenght2(vector_t v)$/;"	f
vector_t	src/math_lib/headers/types.h	/^} vector_t;$/;"	t	typeref:struct:vector
visual	minilibx/mlx_int.h	/^	Visual		*visual;$/;"	m	struct:s_xvar
width	minilibx/mlx_int.h	/^	int				width;$/;"	m	struct:s_img
win1	minilibx/test/main.c	/^void	*win1;$/;"	v
win1	minilibx/test/new_win.c	/^void *win1;$/;"	v
win2	minilibx/test/main.c	/^void    *win2;$/;"	v
win2	minilibx/test/new_win.c	/^void *win2;$/;"	v
win3	minilibx/test/main.c	/^void    *win3;$/;"	v
win_count	minilibx/mlx_loop.c	/^static int	win_count(t_xvar *xvar)$/;"	f	file:
win_list	minilibx/mlx_int.h	/^	t_win_list	*win_list;$/;"	m	struct:s_xvar
window	minilibx/mlx_int.h	/^	Window				window;$/;"	m	struct:s_win_list
wm_delete_window	minilibx/mlx_int.h	/^	Atom		wm_delete_window;$/;"	m	struct:s_xvar
wm_protocols	minilibx/mlx_int.h	/^	Atom		wm_protocols;$/;"	m	struct:s_xvar
x	src/math_lib/headers/types.h	/^	float x, y, z;$/;"	m	struct:vector
x	src/math_lib/headers/types.h	/^	float x,y;$/;"	m	struct:vector2
xpm1_x	minilibx/test/main.c	/^int	xpm1_x;$/;"	v
xpm1_y	minilibx/test/main.c	/^int	xpm1_y;$/;"	v
y	src/math_lib/headers/types.h	/^	float x, y, z;$/;"	m	struct:vector
y	src/math_lib/headers/types.h	/^	float x,y;$/;"	m	struct:vector2
z	src/math_lib/headers/types.h	/^	float x, y, z;$/;"	m	struct:vector
